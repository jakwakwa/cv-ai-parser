generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  email          String?   @unique
  name           String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  accounts       Account[]
  resumes        Resume[]
  sessions       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Resume {
  id                String          @id @default(cuid())
  title             String
  originalFilename  String?
  fileType          String?
  fileSize          Int?
  parsedData        Json?
  parseMethod       String?
  confidenceScore   Float?
  isPublic          Boolean         @default(false)
  slug              String          @unique
  customColors      Json?
  additionalContext Json?
  viewCount         Int             @default(0) @map("view_count")
  downloadCount     Int             @default(0) @map("download_count")
  userId            String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  user              User            @relation(fields: [userId], references: [id])
  versions          ResumeVersion[]
}

model ResumeVersion {
  id             String   @id @default(cuid())
  versionNumber  Int      @map("version_number")
  parsedData     Json     @map("parsed_data")
  changesSummary String?  @map("changes_summary")
  resumeId       String
  createdAt      DateTime @default(now())
  resume         Resume   @relation(fields: [resumeId], references: [id])

  @@unique([resumeId, versionNumber])
}
